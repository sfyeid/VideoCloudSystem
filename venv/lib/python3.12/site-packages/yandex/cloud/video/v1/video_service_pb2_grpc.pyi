"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import yandex.cloud.operation.operation_pb2
import yandex.cloud.video.v1.video_pb2
import yandex.cloud.video.v1.video_service_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class VideoServiceStub:
    """Video management service."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Get: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.video_service_pb2.GetVideoRequest,
        yandex.cloud.video.v1.video_pb2.Video,
    ]
    """Returns the specific video."""

    List: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.video_service_pb2.ListVideoRequest,
        yandex.cloud.video.v1.video_service_pb2.ListVideoResponse,
    ]
    """List videos for channel."""

    BatchGet: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.video_service_pb2.BatchGetVideosRequest,
        yandex.cloud.video.v1.video_service_pb2.BatchGetVideosResponse,
    ]
    """Batch get video in specific channel."""

    Create: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.video_service_pb2.CreateVideoRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Create video."""

    Update: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.video_service_pb2.UpdateVideoRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Update video."""

    Transcode: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.video_service_pb2.TranscodeVideoRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Transcode video."""

    Delete: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.video_service_pb2.DeleteVideoRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Delete video."""

    BatchDelete: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.video_service_pb2.BatchDeleteVideosRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Batch delete video."""

    PerformAction: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.video_service_pb2.PerformVideoActionRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Perform an action on the episode."""

    GetPlayerURL: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.video_service_pb2.GetVideoPlayerURLRequest,
        yandex.cloud.video.v1.video_service_pb2.GetVideoPlayerURLResponse,
    ]
    """Returns url to the player."""

    GetManifests: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.video_service_pb2.GetVideoManifestsRequest,
        yandex.cloud.video.v1.video_service_pb2.GetVideoManifestsResponse,
    ]
    """Returns manifest urls."""

class VideoServiceAsyncStub:
    """Video management service."""

    Get: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.video_service_pb2.GetVideoRequest,
        yandex.cloud.video.v1.video_pb2.Video,
    ]
    """Returns the specific video."""

    List: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.video_service_pb2.ListVideoRequest,
        yandex.cloud.video.v1.video_service_pb2.ListVideoResponse,
    ]
    """List videos for channel."""

    BatchGet: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.video_service_pb2.BatchGetVideosRequest,
        yandex.cloud.video.v1.video_service_pb2.BatchGetVideosResponse,
    ]
    """Batch get video in specific channel."""

    Create: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.video_service_pb2.CreateVideoRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Create video."""

    Update: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.video_service_pb2.UpdateVideoRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Update video."""

    Transcode: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.video_service_pb2.TranscodeVideoRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Transcode video."""

    Delete: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.video_service_pb2.DeleteVideoRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Delete video."""

    BatchDelete: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.video_service_pb2.BatchDeleteVideosRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Batch delete video."""

    PerformAction: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.video_service_pb2.PerformVideoActionRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Perform an action on the episode."""

    GetPlayerURL: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.video_service_pb2.GetVideoPlayerURLRequest,
        yandex.cloud.video.v1.video_service_pb2.GetVideoPlayerURLResponse,
    ]
    """Returns url to the player."""

    GetManifests: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.video_service_pb2.GetVideoManifestsRequest,
        yandex.cloud.video.v1.video_service_pb2.GetVideoManifestsResponse,
    ]
    """Returns manifest urls."""

class VideoServiceServicer(metaclass=abc.ABCMeta):
    """Video management service."""

    @abc.abstractmethod
    def Get(
        self,
        request: yandex.cloud.video.v1.video_service_pb2.GetVideoRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.video.v1.video_pb2.Video, collections.abc.Awaitable[yandex.cloud.video.v1.video_pb2.Video]]:
        """Returns the specific video."""

    @abc.abstractmethod
    def List(
        self,
        request: yandex.cloud.video.v1.video_service_pb2.ListVideoRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.video.v1.video_service_pb2.ListVideoResponse, collections.abc.Awaitable[yandex.cloud.video.v1.video_service_pb2.ListVideoResponse]]:
        """List videos for channel."""

    @abc.abstractmethod
    def BatchGet(
        self,
        request: yandex.cloud.video.v1.video_service_pb2.BatchGetVideosRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.video.v1.video_service_pb2.BatchGetVideosResponse, collections.abc.Awaitable[yandex.cloud.video.v1.video_service_pb2.BatchGetVideosResponse]]:
        """Batch get video in specific channel."""

    @abc.abstractmethod
    def Create(
        self,
        request: yandex.cloud.video.v1.video_service_pb2.CreateVideoRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Create video."""

    @abc.abstractmethod
    def Update(
        self,
        request: yandex.cloud.video.v1.video_service_pb2.UpdateVideoRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Update video."""

    @abc.abstractmethod
    def Transcode(
        self,
        request: yandex.cloud.video.v1.video_service_pb2.TranscodeVideoRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Transcode video."""

    @abc.abstractmethod
    def Delete(
        self,
        request: yandex.cloud.video.v1.video_service_pb2.DeleteVideoRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Delete video."""

    @abc.abstractmethod
    def BatchDelete(
        self,
        request: yandex.cloud.video.v1.video_service_pb2.BatchDeleteVideosRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Batch delete video."""

    @abc.abstractmethod
    def PerformAction(
        self,
        request: yandex.cloud.video.v1.video_service_pb2.PerformVideoActionRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Perform an action on the episode."""

    @abc.abstractmethod
    def GetPlayerURL(
        self,
        request: yandex.cloud.video.v1.video_service_pb2.GetVideoPlayerURLRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.video.v1.video_service_pb2.GetVideoPlayerURLResponse, collections.abc.Awaitable[yandex.cloud.video.v1.video_service_pb2.GetVideoPlayerURLResponse]]:
        """Returns url to the player."""

    @abc.abstractmethod
    def GetManifests(
        self,
        request: yandex.cloud.video.v1.video_service_pb2.GetVideoManifestsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.video.v1.video_service_pb2.GetVideoManifestsResponse, collections.abc.Awaitable[yandex.cloud.video.v1.video_service_pb2.GetVideoManifestsResponse]]:
        """Returns manifest urls."""

def add_VideoServiceServicer_to_server(servicer: VideoServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
